<?xml version="1.0" encoding="ASCII"?>
<TEMPLATES>
  <Template ID="0">
    <Name>tmp_PDOConnect</Name>
    <Data>//Program Author: [+Author+]
//Program Name: [+connect.php+]
//Creation Date: [DATE_TEXT] [TIME]
//Last Modified:
//Purpose:
//Request #:
//---------------------------------------------------------------------------- 
//PDO connect try {
 	$handler = new PDO('mysql:host=[+servername+]; dbname=[+databasename+]', '[+dbusername+]', '[+dbpassword+]');
 	$handler-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
 } 

catch(PDOException $e) { //Return the PDO exception "$e".
  	//die('Sorry database problem.'); //Production message.
 	echo $e-&gt;getMessage(); //Show specific error message. Development.
 }  

//No carriage return after the end. It screws up header information when included.</Data>
  </Template>
  <Template ID="1">
    <Name>BasicHTML</Name>
    <Data>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="description" content="Template HTML Document"&gt;
  &lt;meta name="keywords" content="comma,separated,keywords"&gt;
  &lt;meta name="author" content="Robert Holland"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;script type="text/javascript" src="http://example.com/js/filename.js"&gt;&lt;/script&gt;
&lt;link rel="stylesheet" href="http://example.com/css/filname.css" /&gt;
&lt;/head&gt;

&lt;style&gt;
/*common css*/
table, th, td {border-collapse:collapse; border: 1px solid black;}
th {background-color:#ffff00;}
tr:nth-child(even) {background: #CCC;}
tr:nth-child(odd) {background: #FFF;}
a:link {text-decoration: none;}
a:visited {text-decoration: none;}
a:hover {text-decoration: underline;}
a:active {text-decoration: underline;}
&lt;/style&gt;

&lt;body&gt;
&lt;img src='data:image/png;base64,
' {base64 data goes here without the braces} /&gt;
&lt;br /&gt;

&lt;div&gt;
&lt;p&gt;Blah blah blah&lt;/p&gt;

&lt;table&gt;&lt;caption&gt;Table Caption&lt;/caption&gt;
&lt;tr&gt;&lt;th&gt;One&lt;/th&gt;&lt;th&gt;Two&lt;/th&gt;&lt;th&gt;Three&lt;/th&gt;&lt;th&gt;Four&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</Data>
  </Template>
  <Template ID="2">
    <Name>BasicHTML_Sort</Name>
    <Data>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="description" content="Template HTML Document"&gt;
  &lt;meta name="keywords" content="comma,separated,keywords"&gt;
  &lt;meta name="author" content="Robert Holland"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;link rel="stylesheet" href="https://cdn.datatables.net/1.10.15/css/jquery.dataTables.min.css" /&gt;
&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="https://cdn.datatables.net/1.10.15/js/jquery.dataTables.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
//$(document).ready(function() {
//    $('#example').DataTable();
//} );
$(document).ready(function() {
    $('#example').DataTable( {
        //scrollX:        '50vh', //On a small table, this will center the table data and leave the table headers left adjustes.
        scrollY:        '50vh',
        scrollCollapse: true,
        paging:         false
    } );
} );
&lt;/script&gt;
&lt;/head&gt;

&lt;style&gt;
/*common css*/
th {background-color:#c0c0c0;}
table, th, td {border-collapse:collapse; border: 1px solid black;}
a:link {text-decoration: none;}
a:visited {text-decoration: none;}
a:hover {text-decoration: underline;}
a:active {text-decoration: underline;}
&lt;/style&gt;

&lt;body&gt;
&lt;img src='data:image/png;base64,
' {base64 data goes here without the braces} /&gt;
&lt;br /&gt;

&lt;table id="example" class="display" width="50%"&gt;&lt;caption&gt;Table Caption&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;One&lt;/th&gt;&lt;th&gt;Two&lt;/th&gt;&lt;th&gt;Three&lt;/th&gt;&lt;th&gt;Four&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tfoot&gt;
&lt;tr&gt;&lt;th&gt;One&lt;/th&gt;&lt;th&gt;Two&lt;/th&gt;&lt;th&gt;Three&lt;/th&gt;&lt;th&gt;Four&lt;/th&gt;&lt;/tr&gt;
&lt;/tfoot&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;D&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;D&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;a href="http://example.com"&gt;Example Anchor Link&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</Data>
  </Template>
  <Template ID="3">
    <Name>gitDiff</Name>
    <Data>git diff olderSHA newerSHA -- [+filename+]

Example:
git diff 744213d3c5b54d9814e121ca3fe413e2f26c6820 8b2a9494d2fc7175dc85e31a98c606dd72e8c815 -- [+filename+]

git diff 744213d3c5b54d9814e121ca3fe413e2f26c6820:path/to/[+filename+] 8b2a9494d2fc7175dc85e31a98c606dd72e8c815:path/to/[+filename+]

^
</Data>
  </Template>
  <Template ID="4">
    <Name>MySQLDBPasswordChange</Name>
    <Data>/*
-- Change user password.
-- Find current user: SELECT CURRENT_USER();
//Database Username: [+dbusername+]
//Database Password: [+dbpassword+]
//----------------------------------------------------------------------------
*/

use mysql;
-- Method 1 (Deprecated):
update mysql.user set password('[+dbpassword+]') where user = '[+dbusername+]';
FLUSH PRIVILEGES;

-- Method 2 (MySQL 5.7+):
update mysql.user set authentication_string=PASSWORD('[+dbpassword+]') where user='[+dbusername+]';
FLUSH PRIVILEGES;

-- Method 3 (Preferred method for current user.):
alter user set password = '[+dbpassword+]';
FLUSH PRIVILEGES;

-- MySQL 5.7:
alter user '[+dbusername+]'@'localhost' identified by '[+dbpassword+]';
alter user '[+dbusername+]'@'%' identified by '[+dbpassword+]';

-- Method 4 (Preferred method for another user.):
alter user set password for '[+dbusername+]'@'localhost' = '[+dbpassword+]';
FLUSH PRIVILEGES;

-- Remote user password change:
alter user set password for '[+dbusername+]'@'%' = '[+dbpassword+]';
FLUSH PRIVILEGES;

-- ALTER USER EXAMPLES ==
ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.

-- This worked for me from the MySQL DB prompt:
	SET PASSWORD = PASSWORD('[+dbpassword+]');
-- Source: http://stackoverflow.com/questions/33467337/reset-mysql-root-password-using-alter-user-statement-after-install-on-mac

-- This syntax enables changing your own password without naming your account literally.
	ALTER USER USER() IDENTIFIED BY '[+dbusername+]';

-- This statement changes the password for [+dbusername+] but leaves that for someother[+dbusername+] unchanged.
-- For both accounts, connections are required to use SSL and each account can be used for a maximum of two simultaneous connections:
	ALTER USER
  	'[+dbusername+]'@'localhost' IDENTIFIED BY '[+dbpassword+]',
  	'someother[+dbusername+]'@'localhost'
  	REQUIRE SSL WITH MAX_USER_CONNECTIONS 2;

-- Example 1: Change an account's password and expire it. As a result, the user must connect with the named password and choose a new one at the next connection:
	ALTER USER '[+dbusername+]'@'localhost'
  	IDENTIFIED BY '[+dbpassword+]' PASSWORD EXPIRE;

-- Example 2: Modify an account to use the sha256_password authentication plugin and the given password. Require that a new password be chosen every 180 days:
	ALTER USER '[+dbusername+]'@'localhost'
  	IDENTIFIED WITH sha256_password BY '[+dbpassword+]'  (SHA256 may require an SSL connection on some systems)
  	PASSWORD EXPIRE INTERVAL 180 DAY;

-- Example 3: Lock or unlock an account:
	ALTER USER '[+dbusername+]'@'localhost' ACCOUNT LOCK;
		ALTER USER '[+dbusername+]'@'localhost' ACCOUNT UNLOCK;

-- Example 4: Require an account to connect using SSL and establish a limit of 20 connections per hour:
	ALTER USER '[+dbusername+]'@'localhost'
  	REQUIRE SSL WITH MAX_CONNECTIONS_PER_HOUR 20;
-- http://dev.mysql.com/doc/refman/5.7/en/alter-user.html
</Data>
  </Template>
  <Template ID="5">
    <Name>MySQLDBUser</Name>
    <Data>/*
-- Create local user.
//Database Username: [+dbusername+]
//Database Password: [+dbpassword+]
//----------------------------------------------------------------------------
*/

-- Create local user.
CREATE USER '[+dbusername+]'@'localhost' IDENTIFIED BY '[+dbpassword+]';
-- Create remote user.
CREATE USER '[+dbusername+]'@'%' IDENTIFIED BY '[+dbpassword+]';
-- Tell the server to reload the GRANT TABLES.
FLUSH PRIVILEGES;
</Data>
  </Template>
  <Template ID="6">
    <Name>MySQLDBUserandDatabase</Name>
    <Data>/*
-- Create user and database with the same name.
//Database Username: [+dbusername+]
//Database Password: [+dbpassword+]
//----------------------------------------------------------------------------
*/

CREATE DATABASE [+dbusername+];
-- Create local user.
CREATE USER '[+dbusername+]'@'localhost' IDENTIFIED BY '[+dbpassword+]';
GRANT ALL PRIVILEGES ON [+dbusername+].* TO '[+dbusername+]'@'localhost' WITH GRANT OPTION;
-- Create remote user.
CREATE USER '[+dbusername+]'@'%' IDENTIFIED BY '[+dbpassword+]';
GRANT ALL PRIVILEGES ON [+dbusername+].* TO '[+dbusername+]'@'%' WITH GRANT OPTION;
-- Tell the server to reload the GRANT TABLES.
FLUSH PRIVILEGES;
</Data>
  </Template>
  <Template ID="7">
    <Name>MySQLDBUserDBAccess</Name>
    <Data>/*
--Create user and grant access to database.
//Database Username: [+dbusername+]
//Database Password: [+dbpassword+]
//Database Name: [+dbname+]
//----------------------------------------------------------------------------
*/

-- Create local user.
CREATE USER '[+dbusername+]'@'localhost' IDENTIFIED BY '[+dbpassword+]';
GRANT ALL PRIVILEGES ON [+dbname+].* TO '[+dbusername+]'@'localhost' WITH GRANT OPTION;
-- Create remote user.
CREATE USER '[+dbusername+]'@'%' IDENTIFIED BY '[+dbpassword+]';
GRANT ALL PRIVILEGES ON [+dbname+].* TO '[+dbusername+]'@'%' WITH GRANT OPTION;
-- Tell the server to reload the GRANT TABLES.
FLUSH PRIVILEGES;
</Data>
  </Template>
  <Template ID="8">
    <Name>MySQLFKReferences</Name>
    <Data>-- To run from the command prompt type:
-- mysql -u rob -p &lt; display_foreign_key_references.sql &gt; current_fk_refs.txt

use information_schema;
select
	concat(table_schema,'.',table_name,'.',column_name) as this_db_table_and_column,
	concat(table_schema,'.',referenced_table_name,'.',referenced_column_name) as references_this_db_table_and_column,
	constraint_name
from key_column_usage
where referenced_table_name is not null
order by this_db_table_and_column;

-- The order by clause may not work on all DB's. If there is an error remove it and run again.

-- Same query but this one shows the cascade rules.
use information_schema;
select
	concat(kcu.table_schema,'.',kcu.table_name,'.',kcu.column_name) as this_db_table_and_column,
	concat(kcu.table_schema,'.',kcu.referenced_table_name,'.',kcu.referenced_column_name) as references_this_db_table_and_column,
	kcu.constraint_name,
	rc.update_rule,
	rc.delete_rule
from
	key_column_usage kcu
join referential_constraints rc on (rc.constraint_name= kcu.constraint_name)
where kcu.referenced_table_name is not null order by this_db_table_and_column;

-- The order by clause may not work on all DB's. If there is an error remove it and run again.

-- On Tracy's Ubuntu MySQL server I got this error message: Unknown column 'kcu.TABLE_SCHEMA' in 'field list' because the alias in the from clause was in uppercase and lowercase in the select portion.

-- This is a quick way to view all of the contraints:
select * from information_schema.referential_constraints;

-- This is a quick way to view constraints from a specific database:
select * from information_schema.referential_constraints where constraint_schema = 'thedatabasename';
</Data>
  </Template>
  <Template ID="9">
    <Name>phpMSSQLPDOConnect</Name>
    <Data>&lt;?php
/*
*Program Author: [+Author+]
*Program Name: [+Program+]
*Creation Date: [DATE_TEXT] [TIME]
*Last Modified:
*Copyright [DATE_USER]yyyy[DATE_USER_END]
*Purpose:
*Request #:
*/

$serverName = "MSSQL_ServerFQDN";

try {
	$handler = new PDO("sqlsrv:server=$serverName; Database=databasename", "username", "password");
	$handler-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); //Setting the attributes for the handler that we want to see if exception error.
}

catch(PDOException $e) { //Return the PDO exception and naming it $e.
//	echo 'Caught';
//	die('Sorry database problem.'); //Production message.
	echo $e-&gt;getMessage(); //Show specific error message. Development.
}

$query0 = $handler-&gt;query('select * from databasename');
//ONE: Output each column as row of data.
//	while($r = $query0-&gt;fetch()) {
//		echo $r[1]
//		, ' ', $r[2]
//		, ' ', $r[3]
//		, ' ', $r[4]
//		, ' ', $r[5]
//		, ' ', $r[6]
//		, ' ', $r[7]
//		, ' ', $r[8]
//		, ' ', $r[9]
//		, ' ', $r[10]
//		, ' ', $r[11]
//		, ' ', $r[12]
//		, ' ', $r[13]
//		, ' ', $r[14]
//		, ' ', $r[15]
//		, ' ', $r[16]
//		, ' ', $r[17]
//		, ' ', $r[18]
//		, ' ', $r[19]
//		, ' ', $r[20]
//		, ' ', $r[21]
//		, '\r\n';
//	}

//TWO: Prints one array.
//	$r = $query0-&gt;fetch(PDO::FETCH_ASSOC); //Will fetch the associative array only.
//	echo '&lt;pre&gt;', print_r($r), '&lt;/pre&gt;';

//THREE: Column 1 followed by dashes.
//	foreach($query0 as $r){
//		echo $r[0] . "-----";
//
//	}

//FOUR: Not sure what I was doing here.
//	foreach($query0 as $key =&gt; $r){
//		$out = array_values($r);
//		echo json_encode($out);
//}

//FIVE: Proper JSON.
	$r = $query0-&gt;fetchAll(PDO::FETCH_ASSOC);
	//echo '&lt;pre&gt;', print_r($r), '&lt;/pre&gt;';
	echo json_encode($r);
?&gt;
</Data>
  </Template>
  <Template ID="10">
    <Name>phpMySQLConnect</Name>
    <Data>&lt;?php
/*
*Program Author: [+Author+]
*Program Name: [+program_name+]
*Creation Date: [DATE_TEXT] [TIME]
*Last Modified:
*Copyright [DATE_USER]yyyy[DATE_USER_END]
*Purpose:
*Request #:
*/
//----------------------------------------------------------------------------
//database server  define('db_server', 'database_servername');
//user, password, and database variables

$db_user = '[+database_user+]';
$db_password = '[+database_user_password+]';
$db_dbname = 'database_name';

//echo $q;
$con = mysql_connect($db_server, $db_user, $db_password);
if (!$con)    {
	die('Could not connect: ' . mysql_error());
	}
	mysql_select_db($db_dbname, $con);
?&gt;
</Data>
  </Template>
  <Template ID="11">
    <Name>phpMySQLiConnect</Name>
    <Data>&lt;?php //Program Author: [+Author+]
//Program Name: [+connect.php+]
//Creation Date: [DATE_TEXT] [TIME]
//Last Modified:
//Purpose: //Request #:
//----------------------------------------------------------------------------
//MySQLi Connect
$db_server = '[+database_servername+]';
$db_user = '[+database_username'+];
$db_password = '[+database_userpassword+]';
$db_dbname = '[+database_name+]';

$con = mysqli_connect($db_server, $db_user, $db_password, $db_dbname);
if(!$con){
 die("Failed to connect to the database: " . mysqli_error($con));
 }
if (mysqli_connect_errno()){
 die("Error data : " . mysqli_connect_errno()." : ". mysqli_connect_error());
 }
//else {
//echo "Connected successfully! &lt;br /&gt;\r\n";
//}
?&gt;</Data>
  </Template>
  <Template ID="12">
    <Name>phpMySQLPDOConnect</Name>
    <Data>&lt;?php
//Program Author: [+Author +]
//Program Name: [+connect.php+]
//Creation Date: [DATE_TEXT] [TIME]
//Last Modified:
//Purpose:
//Request #:
//----------------------------------------------------------------------------
//PDO connect try {
 	$handler = new PDO('mysql:host=[+servername_or_ip+]; dbname=[+databasename+]', '[+dbusername+]', '[+dbpassword+]');
 	$handler-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
 }

catch(PDOException $e) { //Return the PDO exception "$e".
  	//die('Sorry database problem.'); //Production message.
 	echo $e-&gt;getMessage(); //Show specific error message. Development.
 }

//No carriage return after the end. It screws up header information when included.
?&gt;</Data>
  </Template>
  <Template ID="13">
    <Name>phpMySQLPDOInsert</Name>
    <Data>// ----------------------------------------------------------------------------
//Program Author: [+Author+]
//Program Name: [+program+]
//Creation Date: [DATE_TEXT] [TIME]
//Last Modified:
//Copyright [DATE_USER]yyyy[DATE_USER_END]
//Purpose:
//Request #:
// -------------http://www.robholland.net/php/examples/stibbard/---------------

&lt;?php
include('[+connect.php+]');

$fname = htmlentities($_POST['firstname']);
$mname = htmlentities($_POST['middlename']);
$lname = htmlentities($_POST['lastname']);
$bdate = htmlentities($_POST['birthdate']);

$stmt = $handler-&gt;prepare("insert into test (firstname, middlename, lastname, birthdate) values (:firstname, :middlename, :lastname, :birthdate);");
$stmt-&gt;bindParam(':firstname', $fname);
$stmt-&gt;bindParam(':middlename', $mname);
$stmt-&gt;bindParam(':lastname', $lname);
$stmt-&gt;bindParam(':birthdate', $bdate);
$stmt-&gt;execute();
//header('Location: ../index.php');
?&gt;</Data>
  </Template>
  <Template ID="14">
    <Name>phpMySQLPDOOutput</Name>
    <Data>&lt;?php
//Program Author: [+Author+]
//Program Name: [+Program+]
//Creation Date: [DATE_TEXT] [TIME]
//Last Modified:
//Copyright [DATE_USER]yyyy[DATE_USER_END]
//Purpose:
//Request #:
// -------------http://www.robholland.net/php/examples/stibbard/---------------
//MySQL PDO Output

require('[+pdoconnect.php+]');
//$statement = $handler-&gt;prepare("select * from thetablename order by id;");

$statement = $handler-&gt;prepare("select this from that order by this_id; ");
$statement-&gt;execute(); //Run the prepared query. Prevents MySQL injection.

$RowCount = $statement-&gt;rowCount(); //Count the number of rows returned.

//Send records to HTML table in browser.
echo "
&lt;html&gt;
&lt;head&gt;
	&lt;script type='text/javascript' src='../js/jquery-1.11.3.js'&gt;&lt;/script&gt;
	&lt;script type='text/javascript' src='js/custom.js'&gt;&lt;/script&gt; &lt;/head&gt; &lt;style&gt;
	th {text-align: left; background-color: #d0e4fe;}
	table, th, td {border-collapse:collapse; border: 1px solid black;}

/* Tooltip container */
.tooltip {
    position: relative;
    display: inline-block;
/*     border-bottom: 1px dotted black;  If you want dots under the hoverable text */
}

/* Tooltip text */
.tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    padding: 5px 0;
    border-radius: 6px;

    /* Position the tooltip text - see examples below! */
    position: absolute;
    z-index: 1;
}

/* Show the tooltip text when you mouse over the tooltip container */ .tooltip:hover .tooltiptext {
    visibility: visible;
}
&lt;/style&gt;

&lt;body&gt;
&lt;table id='us_states' class='tablesorter'&gt; &lt;thead&gt; &lt;tr&gt;
	&lt;th&gt;&lt;/th&gt;
	&lt;th&gt;State&lt;/th&gt;
	&lt;th&gt;Capital&lt;/th&gt;
	&lt;th&gt;Date Formed&lt;/th&gt;
	&lt;th&gt;Size&lt;/th&gt;
	&lt;th&gt;Edit&lt;/th&gt;
&lt;tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
";

			while($r = $statement-&gt;fetch(PDO::FETCH_OBJ)){
			$id_column = $r-&gt;id;
			$state_column = $r-&gt;state;
			$capital_column = $r-&gt;capital;
			$date_formed_column = $r-&gt;date_formed;
			$statedata_column = $r-&gt;data;
			$sq_miles_column = $r-&gt;sq_miles;
			echo "&lt;tr&gt;&lt;td&gt;" . $id_column . "&lt;/td&gt;
			&lt;td&gt;" . $state_column . "&lt;/td&gt;
			&lt;td&gt;" . $capital_column . "&lt;/td&gt;
			&lt;td class='tooltip'&gt;&lt;span class='tooltiptext'&gt;" . $statedata_column . "&lt;/span&gt;" . $date_formed_column . "&lt;/td&gt;
			&lt;td&gt;" . number_format($sq_miles_column) . " sqm.&lt;/td&gt;
			&lt;td&gt;&lt;input type='radio' name='edit' id='" . $id_column . "'&gt;&lt;/td&gt;
			&lt;/tr&gt;";
			}

echo "&lt;/tbody&gt;&lt;/table&gt;";
&lt;!-- &lt;div class='tooltip'&gt;Hover over me
  &lt;span class='tooltiptext'&gt;Tooltip text&lt;/span&gt; &lt;/div&gt; --&gt; ";
?&gt;</Data>
  </Template>
  <Template ID="15">
    <Name>Shell</Name>
    <Data>#WHILE loop
i=1
while [[ $i -le 10 ]]
do
  echo "Searching Node $i: "
  ssh rholland@pcma"$i"p.bdcm.bannerhealth.com "ls -al /cerner/w_custom/
cust_wh/code/$1/$2"
  # echo "$i"
   let i=i+1
done

#FOR Loop
for file in *.txt
do
	cat $file &gt;&gt; OneBigFile.txt
done

#AIX Array:
set -A profileup 2 3 4 5 6 7 8 9 10
for i in ${profileup[@]}
do
echo "Updating .profile on pcma${i}: "
scp ~/.profile rholland@pcma"$i"p.bdcm.bannerhealth.com:~/
#echo "$i"
done

LINUX Array:
rho_hosts=(2 3 4 5 6 7 8 9 10 11 12 19 20 22) #Skipping Node 1 in the array
for i in ${rho_hosts[@]}
do
  echo "Updating .bashrc on samtazapp${i}: "
  scp ~/.bashrc rholland@samtazapp"$i":~/
#  #echo "$i"
done

Make Dummy Files:
dummyfiles(){
if [ $# -eq 0 ]
then
echo "dummyfiles 30"
else
#printf '%s ' {1..$1}.txt |xargs touch
for ((i=1; i&lt;=$1; i++)); do : &gt;&gt; dummyfile_"$i".txt; done
fi
}

functionname(){
if [ $# -eq 0 ]
then
echo "Message"
else
case $1 in
	argument1)
		do something
	;;
	argument2)
		do something
	;;
	*)
		message00="The message"
		echo $message00
	;;
esac
fi
}
</Data>
  </Template>
</TEMPLATES>
