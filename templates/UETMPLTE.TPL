<?xml version="1.0"?>
<Templates encode="utf8escenc"><Template Name="mpTempCustom" Description="Custom mPage Template" Comments="0" Strings="0">Script Author: [+Author+]&#xD;
Program Name: [+Component mPage Name+].prg&#xD;
Foldername on PHX00027: [+Component mPage Folder+]&#xD;
CAPITALIZED FOLDERNAME [+Component mPage Folder Capitalized+]&#xD;
;----------------------------------------------------------------------------&#xD;
&#xD;
###MPAGE TEMPLATE [DATE_TEXT] [TIME]&#xD;
&#xD;
###HTML SECTION FOR AIX NODE BEGIN:&#xD;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;&#xD;
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&#xD;
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"&gt;&#xD;
&lt;!-- [+Component mPage Name+].html --&gt;&#xD;
&lt;!-- Author: [+Author+] --&gt;&#xD;
&lt;!-- Creation Date: [DATE_TEXT] [TIME] --&gt;&#xD;
&#xD;
&lt;head&gt;&#xD;
	&lt;title&gt;&lt;/title&gt;&#xD;
    &lt;meta http-equiv="Content-Type" content="APPLINK,CCLLINK,MPAGES_EVENT,XMLCCLREQUEST,CCLLINKPOPUP,CCLNEWSESSIONWINDOW" name="discern"/&gt;&#xD;
	&lt;link rel="stylesheet" type="text/css" href="\\phx00027\azbld\Custom\mpages\1bh_master_lib\css\1samt_az_css.css" /&gt;&#xD;
	&lt;link rel="stylesheet" type="text/css" href="\\phx00027\azbld\Custom\mpages\[+Component mPage Folder+]\css\[+Component mPage Name+].css" /&gt;&#xD;
&#xD;
&lt;/head&gt;&#xD;
&lt;body onload="javascript:RenderPage2();"&gt;&#xD;
&lt;h1&gt;&lt;/h1&gt;&#xD;
&lt;hr/&gt;&#xD;
&lt;div id="demo_bar"&gt;&lt;/div&gt;&#xD;
&#xD;
&lt;a href="javascript:feedbackLink()"&gt;Feedback&lt;/a&gt;&#xD;
&lt;!-- ******************* --&gt;&#xD;
&lt;DIV id="componentPlaceHolder" class="col-group-2"&gt;&lt;!--Set class to 2 column mpage --&gt;&#xD;
&lt;DIV id="col1PlaceHolder" class="col1"&gt;&lt;!--Set class for 1st column on page --&gt;&#xD;
&lt;div id="[+Component mPage Folder+]" class="component2"&gt;&lt;/div&gt;&#xD;
&#xD;
&lt;/DIV&gt;&#xD;
&#xD;
&#xD;
&lt;DIV id="col2PlaceHolder" class="col2"&gt;&lt;!--Set class for 2nd column on page --&gt;&#xD;
&lt;div id="1bh_mpage_programtemplate" class="component2"&gt;&lt;/div&gt;&#xD;
&lt;/DIV&gt;&#xD;
&lt;/DIV&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;script type="text/javascript" src="\\phx00027\azbld\Custom\mpages\[+Component mPage Folder+]\js\[+Component mPage Name+].js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="\\phx00027\azbld\Custom\mpages\1bh_master_lib\js\1samt_az_javascript.js"&gt;&lt;/script&gt;&#xD;
&#xD;
&#xD;
&lt;script type="text/javascript"&gt;&#xD;
var mpage_data_JSON = &lt;$MPAGE_DATA$&gt;;&#xD;
var MP_DATA = mpage_data_JSON.MPAGE_DATA;&#xD;
&lt;/script&gt;&#xD;
&lt;script type="text/javascript"&gt;&#xD;
&#xD;
function feedbackLink()&#xD;
{&#xD;
var url="http://intranet7.bannerhealth.com/CernerFeedBack/Default.aspx?typ=1&amp;fb=[+Component mPage Folder+]";&#xD;
url +="(ENCNTR_ID: $vis_encntrid$\/"&#xD;
url +="PERSON_ID: $pat_personid$\/"&#xD;
url +="PRSNL_ID: $usr_personid$)"&#xD;
var obj = APPLINK(100,url,"");&#xD;
}&#xD;
&lt;/script&gt;&#xD;
&lt;/html&gt;&#xD;
&#xD;
###HTML SECTION FOR AIX NODE END:&#xD;
&#xD;
###JAVASCRIPT SECTION BEGIN:&#xD;
// ----------------------------------------------------------------------------&#xD;
// Script Author: [+Author+]&#xD;
// Program Name: [+Component mPage Name+].js&#xD;
// Related Files: [+Component mPage Name+].html, [+Component mPage Name+].prg&#xD;
// Creation Date: [DATE_TEXT] [TIME]&#xD;
// Last Modified:&#xD;
// Copyright: (c)[DATE_USER]yyyy[DATE_USER_END]&#xD;
// Purpose:&#xD;
// Request #:&#xD;
// ----------------------------------------------------------------------------&#xD;
&#xD;
&#xD;
function Run[+Component mPage Folder+]Component()&#xD;
{&#xD;
	var COMPONENT = new Component("[+Component mPage Folder+]", "[+Component mPage Name+]", "CCL Program Template");&#xD;
	COMPONENT.HandleSuccess = function(recordData)&#xD;
	{ //The [+Component mPage Folder Capitalized+]_STRUCTURE_CNT and [+Component mPage Folder Capitalized+]_STRUCTURE_ARRAY must be uppercase.&#xD;
		var tempStr = ["&lt;h3 class='header'&gt;",this.headerName," count(",recordData.[+Component mPage Folder Capitalized+]_STRUCTURE_CNT,")&lt;span class='ce' id='",this.id,"_ce'&gt;&lt;/span&gt;&lt;/h3&gt;&lt;div class='component-content'&gt;&lt;table&gt;"];&#xD;
	if(recordData.[+Component mPage Folder Capitalized+]_STRUCTURE_CNT&gt;0)&#xD;
	{&#xD;
//alert(recordData.[+Component mPage Folder Capitalized+]_STRUCTURE_CNT);&#xD;
&#xD;
//BEGIN TABLE DATA&#xD;
		for(var i=0,all_cnt=recordData.[+Component mPage Folder Capitalized+]_STRUCTURE_CNT;i&lt;all_cnt;i++)&#xD;
		{&#xD;
var xxyy=recordData.[+Component mPage Folder Capitalized+]_STRUCTURE_ARRAY[i].RETURNED_PERSON_ID;&#xD;
//alert(xxyy);&#xD;
		tempStr.push("&lt;tr&gt;&lt;th&gt;Bold Column Header&lt;/th&gt;&lt;/tr&gt;");&#xD;
		tempStr.push("&lt;tr&gt;&lt;td&gt;Normal Column data&lt;/td&gt;&lt;/tr&gt;");&#xD;
		tempStr.push("&lt;tr&gt;&lt;td class='bold'&gt;Bold Column data&lt;/td&gt;&lt;/tr&gt;");&#xD;
		tempStr.push("&lt;tr&gt;&lt;td&gt;",xxyy,"&lt;/td&gt;&lt;/tr&gt;");&#xD;
&#xD;
			alert(recordData.[+Component mPage Folder Capitalized+]_STRUCTURE_CNT);&#xD;
			alert(recordData.[+Component mPage Folder Capitalized+]_STRUCTURE_ARRAY[i].RETURNED_PERSON_ID);&#xD;
		}&#xD;
&#xD;
	}&#xD;
	else&#xD;
	{&#xD;
	tempStr.push("&lt;tr&gt;&lt;td colspan='3' class='bold'&gt;No Data Documented&lt;/td&gt;&lt;/tr&gt;");&#xD;
	}&#xD;
		tempStr.push("&lt;/table&gt;&lt;/div&gt;");&#xD;
		var aObj = SAMT_AZ._g(COMPONENT.id);&#xD;
		aObj.style.display = "";&#xD;
		aObj.innerHTML = tempStr.join("");&#xD;
		this.setupToggle("E");&#xD;
		this.setupTooltips();&#xD;
	};&#xD;
	COMPONENT.HandleNoData = function(recordData)&#xD;
	{&#xD;
		var aObj = SAMT_AZ._g(COMPONENT.id);&#xD;
		aObj.style.display = "";&#xD;
		aObj.innerHTML = ["&lt;h3 class='header'&gt;",this.headerName,"&lt;span class='ce' id='",this.id,"_ce'&gt;&lt;/span&gt;&lt;/h3&gt;&lt;div class='component-content'&gt;No Data Found&lt;/div&gt;"].join("");&#xD;
		this.setupToggle("E");&#xD;
	};&#xD;
	COMPONENT.HandleDataError = function(recordData)&#xD;
	{&#xD;
		var aObj = SAMT_AZ._g(COMPONENT.id);&#xD;
		aObj.style.display = "";&#xD;
		aObj.innerHTML = ["&lt;h3 class='header'&gt;",this.headerName,"&lt;span class='ce' id='",this.id,"_ce'&gt;&lt;/span&gt;&lt;/h3&gt;&lt;div class='component-content'&gt;Error Retrieving Results&lt;/div&gt;"].join("");&#xD;
		this.setupToggle("E");&#xD;
	};&#xD;
	var sendArr = ["^^MINE^^",MP_DATA.PERSON_ID,MP_DATA.ENCNTR_ID];&#xD;
//	alert(sendArr);&#xD;
	SAMT_AZ.XMLCclRequestWrapper(COMPONENT, sendArr);&#xD;
}&#xD;
&#xD;
###JAVASCRIPT SECTION END:&#xD;
&#xD;
###CCL PROGRAM SECTION BEGIN:&#xD;
;Script Author: [+Author+]&#xD;
;Program Name: [+Component mPage Name+].prg&#xD;
;Related Files: [+Component mPage Name+].html, [+Component mPage Name+].js&#xD;
;Creation Date: [DATE_TEXT] [TIME]&#xD;
;Last Modified:&#xD;
;Copyright: (c)[DATE_USER]yyyy[DATE_USER_END]&#xD;
;Purpose:&#xD;
;Request #:&#xD;
;Foldername on PHX00027: [+Component mPage Folder+]&#xD;
;----------------------------------------------------------------------------&#xD;
;free record request go&#xD;
;/*Add any fields and data type in your "record request" that your CCL will need to run.*/&#xD;
;&#xD;
;record request&#xD;
;( 	;1 encntr_id = i4&#xD;
;	1 per_id = i4&#xD;
;	1 enc_id = i4&#xD;
;	;1 cvalue = i4&#xD;
;) go&#xD;
;&#xD;
;/*Setting the request equal to the Encounter ID that will be sent from PowerChart.&#xD;
;This information is manually entered here when testing. */&#xD;
;&#xD;
;	set request-&gt;per_id = 123456789.00 go&#xD;
;	set request-&gt;enc_id = 987654321.00 go&#xD;
;&#xD;
;/*The CCL that you want to execute to produce the data. */&#xD;
;&#xD;
;	execute [+Component mPage Name+] "MINE", request-&gt;per_id, request-&gt;enc_id go&#xD;
&#xD;
;----------------------------------------------------------------------------&#xD;
&#xD;
drop program [+Component mPage Name+]:dba go&#xD;
create program [+Component mPage Name+]:dba&#xD;
&#xD;
prompt&#xD;
	"Output to File/Printer/MINE" = "MINE"   ;* Enter or select the printer or file name to send this report to.&#xD;
	, "per_id" = 0&#xD;
	, "enc_id" = 0&#xD;
&#xD;
with OUTDEV, per_id, enc_id&#xD;
&#xD;
%i cust_script:1samt_az_common.inc&#xD;
;%i cust_script:1samt_az_common_cds.inc&#xD;
;PROGRAM HEADER ABOVE&#xD;
&#xD;
/*Begin Record Structure*/&#xD;
;Record structure elements can be lowercase here but must be uppercase in your .js.&#xD;
free record [+Component mPage Folder+]_structure&#xD;
record [+Component mPage Folder+]_structure (&#xD;
1 [+Component mPage Folder+]_structure_cnt=i4&#xD;
1 [+Component mPage Folder+]_structure_array[*]&#xD;
/*Create record structure aliases and assign the proper data type that will match the columns in your query*/&#xD;
	2 returned_person_id = f8 ; Assiging a name and data type to a value returned from the select statement.&#xD;
	2 returned_name_full_formatted = vc ; Assiging a name and data type to a value returned from the select statement.&#xD;
	2 returned_encounter_id = f8 ; Assiging a name and data type to a value returned from the select statement.&#xD;
	2 returned_encounter_type = vc ; Assiging a name and data type to a value returned from the select statement.&#xD;
	2 returned_mrn = vc ;&#xD;
	2 returned_fin = vc ;&#xD;
&#xD;
&#xD;
%i cclsource:status_block.inc&#xD;
)&#xD;
/*End Record Structure*/&#xD;
&#xD;
set [+Component mPage Folder+]_structure-&gt;status_data.status ="F"&#xD;
set debug_ind = 1&#xD;
&#xD;
declare fin_alias = vc&#xD;
declare mrn_alias = vc&#xD;
&#xD;
select&#xD;
	ea.alias&#xD;
&#xD;
from&#xD;
	encntr_alias ea&#xD;
&#xD;
where ea.encntr_id = $enc_id;72958204.00;$enc_id;&#xD;
and ea.encntr_alias_type_cd in (1077.00, 1079.00);FIN Number and MRN Number&#xD;
detail&#xD;
case (ea.encntr_alias_type_cd)&#xD;
	of 1077.00 : fin_alias = trim(ea.alias)&#xD;
	of 1079.00 : mrn_alias = trim(ea.alias)&#xD;
endcase&#xD;
&#xD;
/*Select Query Begin*/&#xD;
&#xD;
select ;into "NL"&#xD;
	p.person_id&#xD;
	,p.name_full_formatted&#xD;
	,e.encntr_id&#xD;
	,Encounter_Type = uar_get_code_display(e.encntr_type_cd)&#xD;
&#xD;
from&#xD;
	person p&#xD;
	, encounter e&#xD;
&#xD;
plan p where p.person_id = $per_id ;37298420.00&#xD;
join e where e.person_id = p.person_id and e.encntr_id = $enc_id ;54975811.00&#xD;
&#xD;
/*Select Query End*/&#xD;
&#xD;
head report&#xD;
x=1&#xD;
rec_cnt = 0 ; Setting record count to zero.&#xD;
&#xD;
/*The "Head" section is most important part of what you are pulling from your query. Example:&#xD;
You could have "head p.person_id" and under that you need to return data from the query into it. */&#xD;
&#xD;
head p.person_id ;alias.fieldname | Opening the header. Should be an indexed column.&#xD;
rec_cnt=rec_cnt+1&#xD;
&#xD;
   if (size([+Component mPage Folder+]_structure-&gt;[+Component mPage Folder+]_structure_array,5)&lt;rec_cnt ) ; Checking the size of the foldername_structure_array array&#xD;
      stat= alterlist([+Component mPage Folder+]_structure-&gt;[+Component mPage Folder+]_structure_array, rec_cnt+10) ; this is increasing the size of the foldername_structure_array array by 10 if needed.&#xD;
   endif&#xD;
&#xD;
/*Returning column data from the query into the record structure aliases*/&#xD;
[+Component mPage Folder+]_structure-&gt;[+Component mPage Folder+]_structure_array[rec_cnt].returned_person_id = cnvtreal(p.person_id)&#xD;
[+Component mPage Folder+]_structure-&gt;[+Component mPage Folder+]_structure_array[rec_cnt].returned_name_full_formatted = trim(p.name_full_formatted)&#xD;
[+Component mPage Folder+]_structure-&gt;[+Component mPage Folder+]_structure_array[rec_cnt].returned_encounter_id = cnvtreal(e.encntr_id)&#xD;
[+Component mPage Folder+]_structure-&gt;[+Component mPage Folder+]_structure_array[rec_cnt].returned_encounter_type = trim(Encounter_Type)&#xD;
[+Component mPage Folder+]_structure-&gt;[+Component mPage Folder+]_structure_array[rec_cnt].returned_mrn = mrn_alias&#xD;
[+Component mPage Folder+]_structure-&gt;[+Component mPage Folder+]_structure_array[rec_cnt].returned_fin = fin_alias&#xD;
&#xD;
foot p.person_id ;alias.fieldname | Closing the header. Same name as head.&#xD;
x=1&#xD;
foot report&#xD;
x=1&#xD;
stat= alterlist([+Component mPage Folder+]_structure-&gt;[+Component mPage Folder+]_structure_array, rec_cnt)&#xD;
[+Component mPage Folder+]_structure-&gt;[+Component mPage Folder+]_structure_cnt = rec_cnt&#xD;
with nocounter&#xD;
&#xD;
&#xD;
set [+Component mPage Folder+]_structure-&gt;status_data.status = "S"   ;info_point (Sets status to S for Success)&#xD;
&#xD;
#exit_script   ;  ID for end of PRG&#xD;
&#xD;
call ajax_reply([+Component mPage Folder+]_structure) 	; info_point (ajax_reply is a function that changes the&#xD;
							;record structure to a string.&#xD;
&#xD;
call echo(cnvtrectojson([+Component mPage Folder+]_structure)) 	; info_point (cnvtrectojson is a function that changes the&#xD;
							;record structure to a JSON string and returns the string to the JS).&#xD;
&#xD;
if (debug_ind)&#xD;
	call echorecord([+Component mPage Folder+]_structure)  ;info_point (displays record structure in listing - troubleshooting)&#xD;
else&#xD;
	free record [+Component mPage Folder+]_structure  ;info_point (clears record structure)&#xD;
endif&#xD;
&#xD;
CALL log_end_script("[+Component mPage Name+]", debug_ind) ; info_point (For log files)&#xD;
&#xD;
end&#xD;
go&#xD;
&#xD;
###CCL PROGRAM SECTION END:&#xD;
&#xD;
###1BH_MPAGE_HOME1.JS FILE BEGIN:&#xD;
function [+Component mPage Folder+](){&#xD;
		 CCLLINK("1samt_az_run_mpage","^^MINE^^,value($pat_personid$),value($vis_encntrid$),0,^^cust_html:[+Component mPage Name+].html^^",1);&#xD;
}&#xD;
###1BH_MPAGE_HOME1.JS FILE END:&#xD;
&#xD;
###TESTLINK.JS FILE BEGIN:&#xD;
tempStr.push("&lt;p&gt;&lt;a href='javascript:[+Component mPage Folder+]();'&gt;[+Component mPage Folder+]&lt;/a&gt;&lt;/p&gt;");&#xD;
###TESTLINK.JS FILE END:&#xD;
&#xD;
###WINDOWS COMMAND PROMPT BEGIN:&#xD;
md [+Component mPage Folder+]\js [+Component mPage Folder+]\css [+Component mPage Folder+]\prg [+Component mPage Folder+]\img&#xD;
###WINDOWS COMMAND PROMPT END:&#xD;
</Template><Template Name="mpTempBedrock" Description="Bedrock mPage Template" Comments="0" Strings="0">;Program Author: [+Author+]&#xD;
;Program Name: 1bh_mpage_[+NameSpace+].prg&#xD;
;Creation Date: [DATE_TEXT] [TIME]&#xD;
;Last Modified:&#xD;
;Copyright: (c) [DATE_TEXT]&#xD;
;Purpose:&#xD;
;Request #:&#xD;
;Namespace: banner.[+NameSpace+]&#xD;
;----------------------------------------------------------------------------&#xD;
;free record request go&#xD;
;/*Add any fields and data type in your "record request" that your CCL will need to run.*/&#xD;
;&#xD;
;record request&#xD;
;( 	;1 encntr_id = i4&#xD;
;	1 per_id = i4&#xD;
;	1 enc_id = i4&#xD;
;	;1 cvalue = i4&#xD;
;) go&#xD;
;&#xD;
;/*Setting the request equal to the Encounter ID that will be sent from PowerChart.&#xD;
;This information is manually entered here when testing. */&#xD;
;&#xD;
;	set request-&gt;per_id = 123456789.00 go&#xD;
;	set request-&gt;enc_id = 987654321.00 go&#xD;
;&#xD;
;/*The CCL that you want to execute to produce the data. */&#xD;
;&#xD;
;	execute 1bh_mpage_[+NameSpace+] "MINE", request-&gt;per_id, request-&gt;enc_id go&#xD;
&#xD;
;----------------------------------------------------------------------------&#xD;
&#xD;
drop program 1bh_mpage_[+NameSpace+]:dba go&#xD;
create program 1bh_mpage_[+NameSpace+]:dba&#xD;
&#xD;
prompt&#xD;
	"Output to File/Printer/MINE" = "MINE"   ;* Enter or select the printer or file name to send this report to.&#xD;
	, "per_id" = 0&#xD;
	, "enc_id" = 0&#xD;
&#xD;
with OUTDEV, per_id, enc_id&#xD;
&#xD;
%i cust_script:1samt_az_common.inc&#xD;
;%i cust_script:1samt_az_common_cds.inc&#xD;
;PROGRAM HEADER ABOVE&#xD;
&#xD;
/*Begin Record Structure*/&#xD;
;Record structure elements can be lowercase here but must be uppercase in your .js.&#xD;
free record [+NameSpace+]_structure&#xD;
record [+NameSpace+]_structure (&#xD;
1 [+NameSpace+]_structure_cnt=i4&#xD;
1 [+NameSpace+]_structure_array[*]&#xD;
/*Create record structure aliases and assign the proper data type that will match the columns in your query*/&#xD;
	2 returned_person_id = f8 ; Assiging a name and data type to a value returned from the select statement.&#xD;
	2 returned_name_full_formatted = vc ; Assiging a name and data type to a value returned from the select statement.&#xD;
	2 returned_encounter_id = f8 ; Assiging a name and data type to a value returned from the select statement.&#xD;
	2 returned_encounter_type = vc ; Assiging a name and data type to a value returned from the select statement.&#xD;
	2 returned_mrn = vc ;&#xD;
	2 returned_fin = vc ;&#xD;
&#xD;
&#xD;
%i cclsource:status_block.inc&#xD;
)&#xD;
/*End Record Structure*/&#xD;
&#xD;
set [+NameSpace+]_structure-&gt;status_data.status ="F"&#xD;
set debug_ind = 1&#xD;
&#xD;
declare fin_alias = vc&#xD;
declare mrn_alias = vc&#xD;
&#xD;
select&#xD;
	ea.alias&#xD;
&#xD;
from&#xD;
	encntr_alias ea&#xD;
&#xD;
where ea.encntr_id = $enc_id;72958204.00;$enc_id;&#xD;
and ea.encntr_alias_type_cd in (1077.00, 1079.00);FIN Number and MRN Number&#xD;
detail&#xD;
case (ea.encntr_alias_type_cd)&#xD;
	of 1077.00 : fin_alias = trim(ea.alias)&#xD;
	of 1079.00 : mrn_alias = trim(ea.alias)&#xD;
endcase&#xD;
&#xD;
/*Select Query Begin*/&#xD;
&#xD;
select ;into "NL"&#xD;
	p.person_id&#xD;
	,p.name_full_formatted&#xD;
	,e.encntr_id&#xD;
	,Encounter_Type = uar_get_code_display(e.encntr_type_cd)&#xD;
&#xD;
from&#xD;
	person p&#xD;
	, encounter e&#xD;
&#xD;
plan p where p.person_id = $per_id ;37298420.00&#xD;
join e where e.person_id = p.person_id and e.encntr_id = $enc_id ;54975811.00&#xD;
&#xD;
/*Select Query End*/&#xD;
&#xD;
head report&#xD;
x=1&#xD;
rec_cnt = 0 ; Setting record count to zero.&#xD;
&#xD;
/*The "Head" section is most important part of what you are pulling from your query. Example:&#xD;
You could have "head p.person_id" and under that you need to return data from the query into it. */&#xD;
&#xD;
head p.person_id ;alias.fieldname | Opening the header. Should be an indexed column.&#xD;
rec_cnt=rec_cnt+1&#xD;
&#xD;
   if (size([+NameSpace+]_structure-&gt;[+NameSpace+]_structure_array,5)&lt;rec_cnt ) ; Checking the size of the [+NameSpace+]_structure_array array&#xD;
      stat= alterlist([+NameSpace+]_structure-&gt;[+NameSpace+]_structure_array, rec_cnt+10) ; this is increasing the size of the [+NameSpace+]_structure_array array by 10 if needed.&#xD;
   endif&#xD;
&#xD;
/*Returning column data from the query into the record structure aliases*/&#xD;
[+NameSpace+]_structure-&gt;[+NameSpace+]_structure_array[rec_cnt].returned_person_id = cnvtreal(p.person_id)&#xD;
[+NameSpace+]_structure-&gt;[+NameSpace+]_structure_array[rec_cnt].returned_name_full_formatted = trim(p.name_full_formatted)&#xD;
[+NameSpace+]_structure-&gt;[+NameSpace+]_structure_array[rec_cnt].returned_encounter_id = cnvtreal(e.encntr_id)&#xD;
[+NameSpace+]_structure-&gt;[+NameSpace+]_structure_array[rec_cnt].returned_encounter_type = trim(Encounter_Type)&#xD;
[+NameSpace+]_structure-&gt;[+NameSpace+]_structure_array[rec_cnt].returned_mrn = mrn_alias&#xD;
[+NameSpace+]_structure-&gt;[+NameSpace+]_structure_array[rec_cnt].returned_fin = fin_alias&#xD;
&#xD;
foot p.person_id ;alias.fieldname | Closing the header. Same name as head.&#xD;
x=1&#xD;
foot report&#xD;
x=1&#xD;
stat= alterlist([+NameSpace+]_structure-&gt;[+NameSpace+]_structure_array, rec_cnt)&#xD;
[+NameSpace+]_structure-&gt;[+NameSpace+]_structure_cnt = rec_cnt&#xD;
with nocounter&#xD;
&#xD;
set [+NameSpace+]_structure-&gt;status_data.status = "S"   ;info_point (Sets status to S for Success)&#xD;
&#xD;
#exit_script   ;  ID for end of PRG&#xD;
&#xD;
call ajax_reply([+NameSpace+]_structure) 	; info_point (ajax_reply is a function that changes the&#xD;
							;record structure to a string.&#xD;
&#xD;
call echo(cnvtrectojson([+NameSpace+]_structure)) 	; info_point (cnvtrectojson is a function that changes the&#xD;
							;record structure to a JSON string and returns the string to the JS).&#xD;
&#xD;
if (debug_ind)&#xD;
	call echorecord([+NameSpace+]_structure)  ;info_point (displays record structure in listing - troubleshooting)&#xD;
else&#xD;
	free record [+NameSpace+]_structure  ;info_point (clears record structure)&#xD;
endif&#xD;
&#xD;
CALL log_end_script("1bh_mpage_[+NameSpace+]", debug_ind) ; info_point (For log files)&#xD;
&#xD;
end&#xD;
go&#xD;
&#xD;
/*JS NAMESPACE BELOW*/&#xD;
//BEGIN [+NameSpace+]&#xD;
/**&#xD;
* Project:&#xD;
* Version: 1.0&#xD;
* Released:	[DATE_TEXT] [TIME]&#xD;
* Updated:&#xD;
* Purpose:&#xD;
* @author: [+Author+]&#xD;
* Request#:&#xD;
*/&#xD;
&#xD;
MPage.namespace("banner");&#xD;
banner.[+NameSpace+] = function(){};&#xD;
banner.[+NameSpace+].prototype = new MPage.Component();&#xD;
banner.[+NameSpace+].prototype.constructor = MPage.Component();&#xD;
banner.[+NameSpace+].prototype.base = MPage.Component.prototype;&#xD;
banner.[+NameSpace+].prototype.name = "banner.[+NameSpace+]";&#xD;
banner.[+NameSpace+].prototype.cclProgram = "1bh_mpage_[+NameSpace+]";&#xD;
banner.[+NameSpace+].prototype.cclParams = [];&#xD;
banner.[+NameSpace+].prototype.cclDataType = "JSON";&#xD;
&#xD;
banner.[+NameSpace+].prototype.init = function(options)&#xD;
{&#xD;
//	// Check cookie for param update&#xD;
//	if(readCookie("bldgltframe") == null){&#xD;
//		createCookie("bldgltframe","72,H",1);&#xD;
//	}&#xD;
&#xD;
	var params = [];&#xD;
	params.push("mine");&#xD;
	params.push(this.getProperty("personId"));&#xD;
	params.push(this.getProperty("encounterId"));&#xD;
//	params.push(readCookie("bldgltframe"));&#xD;
	params.push(300);&#xD;
	this.cclParams = params;&#xD;
};&#xD;
&#xD;
banner.[+NameSpace+].prototype.render = function()&#xD;
{&#xD;
	var tempStr=[];&#xD;
	var element = this.getTarget();&#xD;
	var jsonObj = this.data;&#xD;
    var recordData = jsonObj.RECORD_DATA;&#xD;
	var compid = this.getComponentUid();&#xD;
	MPage.getCustomComp(compid).setProperty("headerSubTitle","");&#xD;
&#xD;
//alert("Hello World");&#xD;
	tempStr.push("&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;",this.name,"&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;");&#xD;
	element.innerHTML = tempStr.join("");&#xD;
&#xD;
};&#xD;
&#xD;
// END [+NameSpace+]&#xD;
</Template></Templates>
