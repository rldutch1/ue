<?xml version="1.0"?>
<Templates encode="utf8escenc"><Template Name="tmp_regex_examples" Description="Regex Examples" Comments="0" Strings="0">Regex in UltraEdit / UEStudio&#xD;&#xD;
UltraEdit symbol	Unix symbol	Function&#xD;&#xD;
			%									^^		Matches beginning of line (positional match).&#xD;&#xD;
			$									$			Matches end of line (positional match).&#xD;&#xD;
			?									.			Matches any single character except a new line character. Does not match repeated new lines.&#xD;&#xD;
			*												Matches any number of occurrences of any character except new line.&#xD;&#xD;
			+									+			Matches one or more of the preceding single character/character set. At least one occurrence of the preceding character or at least one of the characters in preceding character set must be found.&#xD;&#xD;
			++								*			Matches the preceding single character/character set zero or more times.&#xD;&#xD;
			^^								\			Indicates the next character has a special meaning. "n" on its own matches the character "n". "^^n" (UE syntax) or "\n" (Unix syntax) matches a line feed (LF, or hex 0A) character. See examples below.&#xD;&#xD;
			[ ]								[ ]		Matches any single character or range in the brackets.&#xD;&#xD;
			[~xyz]				[^^xyz]		A negative character set. Matches any characters NOT between brackets.&#xD;&#xD;
			^^b								\f		Matches a page break/form feed character.&#xD;&#xD;
			^[#0C#];								\p		Matches a newline (CR/LF, or hex 0D 0A) (paragraph) (Windows line terminators).&#xD;&#xD;
			^^r								\r		Matches a newline (CR, or hex 0D) (Mac legacy line terminators).&#xD;&#xD;
			^^n								\n		Matches a newline (LF, or hex 0A) (Unix line terminators).&#xD;&#xD;
			^^t								\t		Matches a tabstop.&#xD;&#xD;
			[0-9]							\d		Matches any digit character.&#xD;&#xD;
			[~0-9]						\D		Matches any non-digit character.&#xD;&#xD;
			[ ^^t^^b]					\s		Matches any whitespace including space, tab, form feed, etc., but not new line characters.&#xD;&#xD;
			[~ ^^t^^b]				\S		Matches any non-whitespace character but will still match new line characters.&#xD;&#xD;
												\v		Matches a vertical tab character.&#xD;&#xD;
			[0-9a-z_]					\w		Matches any alphanumeric character including underscore.&#xD;&#xD;
			[~0-9a-z_]				\W		Matches any character except alphanumeric characters and underscore.&#xD;&#xD;
			^^{A^^}^^{B^^}	(A|B)		Matches expression A or B.&#xD;&#xD;
			^^								\			Overrides the following regular expression character.&#xD;&#xD;
			^^(...^^)				(...)		Brackets or tags an expression to use in the replace command. A regular expression may have up to 9 tagged expressions, numbered according to their order in the regular expression.&#xD;&#xD;
			^^1	\1									Numerical reference to tagged expressions. Text matched with tagged expressions may be used in replace commands with this format.&#xD;&#xD;
			Note: ^^ refers to the character '^^', not Ctrl + value.&#xD;&#xD;
&#xD;&#xD;
&#xD;&#xD;
UltraEdit / Unix regular expressions examples&#xD;&#xD;
Simple string matching&#xD;&#xD;
Simple string matching is probably the most basic form of regular expressions but can allow you to quickly exploit different patterns so that you can search for more than one string at a time rather than doing multiple Find operations.&#xD;&#xD;
&#xD;&#xD;
UltraEdit legacy regex:&#xD;&#xD;
  Find what: m?n&#xD;&#xD;
  Matches: "man" and "men" but not "moon"&#xD;&#xD;
&#xD;&#xD;
  Find what: t*t&#xD;&#xD;
  Matches: "test", "tonight" and "tea time" (the "tea t" portion) but not "tea&#xD;&#xD;
  time" (newline between "tea " and "time").&#xD;&#xD;
&#xD;&#xD;
  Find what: Te+st&#xD;&#xD;
  Matches: "test", "teest", "teeeest", etc. but does not match "tst"&#xD;&#xD;
&#xD;&#xD;
  Unix regex:&#xD;&#xD;
  Find what: m.n&#xD;&#xD;
  Matches: "man" and "men" but not "moon"&#xD;&#xD;
&#xD;&#xD;
  Find what: t.*t&#xD;&#xD;
  Matches: "test", "tonight" and "tea time" (the "tea t" portion) but not "tea&#xD;&#xD;
  time" (newline between "tea " and "time").&#xD;&#xD;
&#xD;&#xD;
  Find what: Te+st&#xD;&#xD;
  Matches: "test", "teest", "teeeest", etc. but does not match "tst"&#xD;&#xD;
&#xD;&#xD;
Character Sets&#xD;&#xD;
  A character set is a group of characters encapsulated by "[" and "]". These may be used to designate specific characters to be matched or ranges, for example [aeud] or [a-z].&#xD;&#xD;
&#xD;&#xD;
  UltraEdit legacy regex:&#xD;&#xD;
  Find what: [aeiou]&#xD;&#xD;
  Matches: every vowel&#xD;&#xD;
&#xD;&#xD;
  NOTE: Regular expressions in UltraEdit are not case-sensitive unless Match case is enabled in the find dialog.&#xD;&#xD;
&#xD;&#xD;
  Find what: [,.^^?]&#xD;&#xD;
  Matches: a literal ",", "." or "?".&#xD;&#xD;
&#xD;&#xD;
  Because the "?" is a symbol used in expressions it must be "escaped" for the literal character to be matched rather than interpreted as an expression.&#xD;&#xD;
&#xD;&#xD;
  Find what: [0-9a-z]&#xD;&#xD;
  Matches: any digit or letter&#xD;&#xD;
&#xD;&#xD;
  Find what: [~0-9]&#xD;&#xD;
  Matches: any character except a digit (~ means NOT the following)&#xD;&#xD;
&#xD;&#xD;
Unix regex:&#xD;&#xD;
  Find what: [aeiou]&#xD;&#xD;
  Matches: every vowel&#xD;&#xD;
&#xD;&#xD;
  Find what: [,\.?]&#xD;&#xD;
  Matches: a literal ",", "." or "?".&#xD;&#xD;
&#xD;&#xD;
  Because the "." is a special symbol used in expressions it must be "escaped" for the literal character to be matched rather than interpreted as an expression.&#xD;&#xD;
&#xD;&#xD;
  Find what: [0-9a-z]&#xD;&#xD;
  Matches: any digit or letter&#xD;&#xD;
&#xD;&#xD;
  Find what: [^^0-9]&#xD;&#xD;
  Matches: any character except a digit (^^ means NOT the following)&#xD;&#xD;
&#xD;&#xD;
"Or" Expressions&#xD;&#xD;
  Currently UltraEdit legacy regex allows for only two strings in an "or" expression.&#xD;&#xD;
&#xD;&#xD;
  UltraEdit legacy regex:&#xD;&#xD;
  Find what: ^^{John^^}^^{Tom^^}&#xD;&#xD;
  Unix regex:&#xD;&#xD;
  Find what: (John|Tom|Dick|Harry)&#xD;&#xD;
  There should be nothing between the two expressions. You may combine "A or B" and "C or D" in the same search as follows:&#xD;&#xD;
&#xD;&#xD;
  UltraEdit legacy regex:&#xD;&#xD;
  Find what: ^^{John^^}^^{Tom^^} ^^{Smith^^}^^{Jones^^}&#xD;&#xD;
  Unix regex:&#xD;&#xD;
  Find what: (John|Tom) (Smith|Jone)&#xD;&#xD;
  This will search for "John" or "Tom" followed by "Smith" or "Jones".&#xD;&#xD;
&#xD;&#xD;
Deleting blank lines&#xD;&#xD;
  With regular expressions selected in the replace dialog this will match the a CR/LF (DOS line terminator) immediately followed by the end of a line (i.e., a blank line) and replace it with nothing, effectively deleting it:&#xD;&#xD;
&#xD;&#xD;
  UltraEdit legacy regex:&#xD;&#xD;
  Find what: ^[#0C#];$&#xD;&#xD;
  Replace With: (literally nothing)&#xD;&#xD;
&#xD;&#xD;
  Unix regex:&#xD;&#xD;
  Find what: \p$&#xD;&#xD;
  Replace With: (literally nothing)&#xD;&#xD;
&#xD;&#xD;
Reformatting text with tagged expressions&#xD;&#xD;
  Example 1:&#xD;&#xD;
  Tagged expressions may be used to mark various data members so that they may be reorganized, reformatting the data. For example, it might be useful to be able to rearrange:&#xD;&#xD;
&#xD;&#xD;
  John Smith, 385 Central Ave., Cincinnati, OH, 45238&#xD;&#xD;
&#xD;&#xD;
  into:&#xD;&#xD;
&#xD;&#xD;
  45238, Smith, John, 385 Central Ave., Cincinnati, OH&#xD;&#xD;
&#xD;&#xD;
  UltraEdit legacy regex:&#xD;&#xD;
  Find what: %^^([a-z]+^^) ^^([a-z]+^^), ^^(*^^), ^^(*^^), ^^(*^^), ^^([0-9]+^^)&#xD;&#xD;
  Replace With: ^^6, ^^2, ^^1, ^^3, ^^4, ^^5&#xD;&#xD;
&#xD;&#xD;
  Unix regex:&#xD;&#xD;
  Find what: ^^([a-z]+) ([a-z]+), (.*), (.*), (.*), ([0-9]+)&#xD;&#xD;
  Replace With: \6, \2, \1, \3, \4, \5&#xD;&#xD;
&#xD;&#xD;
  Example 2:&#xD;&#xD;
  If you have a web-based registration system it might be useful to rearrange the order data into a format easily used by a database:&#xD;&#xD;
&#xD;&#xD;
  name = John Smith&#xD;&#xD;
  address1 = 385 Central Ave.&#xD;&#xD;
  address2 =&#xD;&#xD;
  city = Cincinnati&#xD;&#xD;
  state = OH&#xD;&#xD;
  zip = 45238&#xD;&#xD;
  into:&#xD;&#xD;
&#xD;&#xD;
  John Smith, 385 Central Ave.,, Cincinnati, OH, 45238,&#xD;&#xD;
&#xD;&#xD;
  This can be done with the following expression:&#xD;&#xD;
&#xD;&#xD;
  UltraEdit legacy regex:&#xD;&#xD;
  Find what: name = ^^([a-z ]+^^)^[#0C#];address1 = ^^([a-z 0-9.,]+^^)^[#0C#];address2 = ^^([a-z 0-9.,]++^^)^[#0C#];city = ^^([a-z]+^^)^[#0C#];state = ^^([a-z]+^^)^[#0C#];zip = ^^([0-9^^-]+^^)&#xD;&#xD;
  Replace With:^^1, ^^2, ^^3, ^^4, ^^5, ^^6&#xD;&#xD;
&#xD;&#xD;
  Unix regex:&#xD;&#xD;
  Find what: name = ([a-z ]+)\paddress1 = ([a-z 0-9.,]+)\paddress2 = ([a-z 0-9.,]*)\pcity = ([a-z]+)\pstate = ([a-z]+)\pzip = ([0-9^^-]+)&#xD;&#xD;
  Replace With:\1, \2, \3, \4, \5, \6&#xD;&#xD;
^</Template></Templates>
