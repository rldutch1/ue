<?xml version="1.0"?>
<Templates encode="utf8escenc"><Template Name="alert" Description="" Comments="0" Strings="0">alert("[+Alert text+]");</Template><Template Name="dateFunction" Description="Date Function" Comments="0" Strings="0">//Example 1:&#xD;&#xD;
function getTheDateTime() {&#xD;&#xD;
	var now     = new Date(); &#xD;&#xD;
	var year    = now.getFullYear();&#xD;&#xD;
	var month   = now.getMonth()+1; &#xD;&#xD;
	var day     = now.getDate();&#xD;&#xD;
	var hour    = now.getHours();&#xD;&#xD;
	var minute  = now.getMinutes();&#xD;&#xD;
	var second  = now.getSeconds(); &#xD;&#xD;
	if(month.toString().length == 1) {&#xD;&#xD;
		month = '0'+month;&#xD;&#xD;
	}&#xD;&#xD;
	if(day.toString().length == 1) {&#xD;&#xD;
		day = '0'+day;&#xD;&#xD;
	}   &#xD;&#xD;
	if(hour.toString().length == 1) {&#xD;&#xD;
		hour = '0'+hour;&#xD;&#xD;
	}&#xD;&#xD;
	if(minute.toString().length == 1) {&#xD;&#xD;
		minute = '0'+minute;&#xD;&#xD;
	}&#xD;&#xD;
	if(second.toString().length == 1) {&#xD;&#xD;
		second = '0'+second;&#xD;&#xD;
	}   &#xD;&#xD;
	var dateTime = year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second;   &#xD;&#xD;
	return dateTime;&#xD;&#xD;
}&#xD;&#xD;
&#xD;&#xD;
//// example usage: realtime clock&#xD;&#xD;
//setInterval(function(){&#xD;&#xD;
//	currentTime = getTheDateTime();&#xD;&#xD;
//	document.getElementById("digital-clock").innerHTML = currentTime;&#xD;&#xD;
//}, 1000);&#xD;&#xD;
&#xD;&#xD;
//Example 2:&#xD;&#xD;
function startTheTime() {&#xD;&#xD;
	var dttm = new Date();&#xD;&#xD;
	var y = dttm.getFullYear();&#xD;&#xD;
	var M = checkTime(dttm.getMonth()+1);&#xD;&#xD;
	var d = checkTime(dttm.getDate());&#xD;&#xD;
	var h = checkTime(dttm.getHours());&#xD;&#xD;
	var m = checkTime(dttm.getMinutes());&#xD;&#xD;
	var s = checkTime(dttm.getSeconds());&#xD;&#xD;
	document.getElementById('clock').innerHTML =&#xD;&#xD;
	y + "-" + M + "-" + d + " " + h + ":" + m + ":" + s; //Full formatted date/time.&#xD;&#xD;
	var t = setTimeout(startTheTime, 500);&#xD;&#xD;
}&#xD;&#xD;
function checkTime(i) {  //Check if less than 10;&#xD;&#xD;
	if (i &lt; 10) {i = "0" + i};  // add zero in front of numbers &lt; 10&#xD;&#xD;
	return i;&#xD;&#xD;
}&#xD;&#xD;
// // example usage: realtime clock&#xD;&#xD;
//&lt;body onload="startTheTime()"&gt;&#xD;&#xD;
//&lt;span id="clock"&gt;&lt;/span&gt;&#xD;&#xD;
&#xD;&#xD;
//Example 3:&#xD;&#xD;
function formatTheDate(date, format, utc){&#xD;&#xD;
	//https://stackoverflow.com/questions/14638018/current-time-formatting-with-javascript&#xD;&#xD;
	var MMMM = ["\x00", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];&#xD;&#xD;
	var MMM = ["\x01", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];&#xD;&#xD;
	var dddd = ["\x02", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];&#xD;&#xD;
	var ddd = ["\x03", "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];&#xD;&#xD;
	function ii(i, len) { var s = i + ""; len = len || 2; while (s.length &lt; len) s = "0" + s; return s; }&#xD;&#xD;
	&#xD;&#xD;
	var y = utc ? date.getUTCFullYear() : date.getFullYear();&#xD;&#xD;
	format = format.replace(/(|[\\])yyyy+/g, "$1" + y);&#xD;&#xD;
	format = format.replace(/(|[\\])yy/g, "$1" + y.toString().substr(2, 2));&#xD;&#xD;
	format = format.replace(/(|[\\])y/g, "$1" + y);&#xD;&#xD;
	&#xD;&#xD;
	var M = (utc ? date.getUTCMonth() : date.getMonth()) + 1;&#xD;&#xD;
	format = format.replace(/(|[\\])MMMM+/g, "$1" + MMMM[0]);&#xD;&#xD;
	format = format.replace(/(|[\\])MMM/g, "$1" + MMM[0]);&#xD;&#xD;
	format = format.replace(/(|[\\])MM/g, "$1" + ii(M));&#xD;&#xD;
	format = format.replace(/(|[\\])M/g, "$1" + M);&#xD;&#xD;
	&#xD;&#xD;
	var d = utc ? date.getUTCDate() : date.getDate();&#xD;&#xD;
	format = format.replace(/(|[\\])dddd+/g, "$1" + dddd[0]);&#xD;&#xD;
	format = format.replace(/(|[\\])ddd/g, "$1" + ddd[0]);&#xD;&#xD;
	format = format.replace(/(|[\\])dd/g, "$1" + ii(d));&#xD;&#xD;
	format = format.replace(/(|[\\])d/g, "$1" + d);&#xD;&#xD;
	&#xD;&#xD;
	var H = utc ? date.getUTCHours() : date.getHours();&#xD;&#xD;
	format = format.replace(/(|[\\])HH+/g, "$1" + ii(H));&#xD;&#xD;
	format = format.replace(/(|[\\])H/g, "$1" + H);&#xD;&#xD;
	&#xD;&#xD;
	var h = H &gt; 12 ? H - 12 : H == 0 ? 12 : H;&#xD;&#xD;
	format = format.replace(/(|[\\])hh+/g, "$1" + ii(h));&#xD;&#xD;
	format = format.replace(/(|[\\])h/g, "$1" + h);&#xD;&#xD;
	&#xD;&#xD;
	var m = utc ? date.getUTCMinutes() : date.getMinutes();&#xD;&#xD;
	format = format.replace(/(|[\\])mm+/g, "$1" + ii(m));&#xD;&#xD;
	format = format.replace(/(|[\\])m/g, "$1" + m);&#xD;&#xD;
	&#xD;&#xD;
	var s = utc ? date.getUTCSeconds() : date.getSeconds();&#xD;&#xD;
	format = format.replace(/(|[\\])ss+/g, "$1" + ii(s));&#xD;&#xD;
	format = format.replace(/(|[\\])s/g, "$1" + s);&#xD;&#xD;
	&#xD;&#xD;
	var f = utc ? date.getUTCMilliseconds() : date.getMilliseconds();&#xD;&#xD;
	format = format.replace(/(|[\\])fff+/g, "$1" + ii(f, 3));&#xD;&#xD;
	f = Math.round(f / 10);&#xD;&#xD;
	format = format.replace(/(|[\\])ff/g, "$1" + ii(f));&#xD;&#xD;
	f = Math.round(f / 10);&#xD;&#xD;
	format = format.replace(/(|[\\])f/g, "$1" + f);&#xD;&#xD;
	&#xD;&#xD;
	var T = H &lt; 12 ? "AM" : "PM";&#xD;&#xD;
	format = format.replace(/(|[\\])TT+/g, "$1" + T);&#xD;&#xD;
	format = format.replace(/(|[\\])T/g, "$1" + T.charAt(0));&#xD;&#xD;
	&#xD;&#xD;
	var t = T.toLowerCase();&#xD;&#xD;
	format = format.replace(/(|[\\])tt+/g, "$1" + t);&#xD;&#xD;
	format = format.replace(/(|[\\])t/g, "$1" + t.charAt(0));&#xD;&#xD;
	&#xD;&#xD;
	var tz = -date.getTimezoneOffset();&#xD;&#xD;
	var K = utc || !tz ? "Z" : tz &gt; 0 ? "+" : "-";&#xD;&#xD;
	if (!utc)&#xD;&#xD;
	{&#xD;&#xD;
		tz = Math.abs(tz);&#xD;&#xD;
		var tzHrs = Math.floor(tz / 60);&#xD;&#xD;
		var tzMin = tz % 60;&#xD;&#xD;
		K += ii(tzHrs) + ":" + ii(tzMin);&#xD;&#xD;
	}&#xD;&#xD;
	format = format.replace(/(|[\\])K/g, "$1" + K);&#xD;&#xD;
	&#xD;&#xD;
	var day = (utc ? date.getUTCDay() : date.getDay()) + 1;&#xD;&#xD;
	format = format.replace(new RegExp(dddd[0], "g"), dddd[day]);&#xD;&#xD;
	format = format.replace(new RegExp(ddd[0], "g"), ddd[day]);&#xD;&#xD;
	&#xD;&#xD;
	format = format.replace(new RegExp(MMMM[0], "g"), MMMM[M]);&#xD;&#xD;
	format = format.replace(new RegExp(MMM[0], "g"), MMM[M]);&#xD;&#xD;
	&#xD;&#xD;
	format = format.replace(/\\(.)/g, "$1");&#xD;&#xD;
	&#xD;&#xD;
	return format;&#xD;&#xD;
};&#xD;&#xD;
&#xD;&#xD;
////Example usage:&#xD;&#xD;
//&lt;span id="time"&gt;&lt;/span&gt;&#xD;&#xD;
//var d = new Date();&#xD;&#xD;
//var x = document.getElementById("time");&#xD;&#xD;
////x.innerHTML = formatTheDate(d, "dddd dd MMM yyyy HH:mm:ss");&#xD;&#xD;
//x.innerHTML = formatTheDate(d, "dddd dd MMMM yyyy HH:mm:ss");</Template><Template Name="else" Description="">else { &#xD;&#xD;
	[+X+]; &#xD;&#xD;
}&#xD;&#xD;
^</Template><Template Name="elseif" Description="">else if ([+evaluation+]) {&#xD;&#xD;
 	[+Do some work+]; &#xD;&#xD;
}&#xD;&#xD;
^</Template><Template Name="finally" Description="">finally { 	^ }</Template><Template Name="for" Description="">for ([+i+]=[+X+]; [+i+]&lt;[+Y+]; [+i+]++) {&#xD;&#xD;
 	[+code to be executed+];&#xD;&#xD;
}&#xD;&#xD;
^</Template><Template Name="function" Description="">function [+TheFunction+] ([+parameters+]) {&#xD;&#xD;
	[+Do some work+];&#xD;&#xD;
	}&#xD;&#xD;
^</Template><Template Name="getElementsByClassName" Description="The getElementsByClassName() Method" Comments="0" Strings="0">&#xD;&#xD;
&lt;script&gt;&#xD;&#xD;
//source="https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_document_getelementsbyclassname2"&#xD;&#xD;
//source1="https://www.javascripttutorial.net/javascript-dom/javascript-getelementsbyclassname/"&#xD;&#xD;
//source2="https://stackoverflow.com/questions/20814699/set-value-of-html-input-elements-by-class-with-javascript-in-browser"&#xD;&#xD;
&#xD;&#xD;
//Change the background color of all elements with the class "[+TheNameOfTheClass+]".&#xD;&#xD;
var thecolor = "tomato";&#xD;&#xD;
const collection = document.getElementsByClassName("[+TheNameOfTheClass+]");&#xD;&#xD;
for (i=0; i&lt;collection.length; i++) {&#xD;&#xD;
 	collection[i].style.backgroundColor = thecolor;&#xD;&#xD;
}&#xD;&#xD;
&#xD;&#xD;
//Button: &lt;button onclick="myFunction()"&gt;test&lt;/button&gt;&#xD;&#xD;
//Function to change innerHTML to "Hello World" of all elements with the class "[+TheNameOfTheClass+]".&#xD;&#xD;
function myFunction() {&#xD;&#xD;
    var hw = "Hello World!"&#xD;&#xD;
    var x = document.getElementsByClassName("[+TheNameOfTheClass+]");&#xD;&#xD;
    for (i=0; i&lt;x.length; i++) {&#xD;&#xD;
     	x[i].innerHTML = hw;&#xD;&#xD;
    }&#xD;&#xD;
    //x[0].innerHTML = "Hello World!";&#xD;&#xD;
    //x[0].innerHTML = hw;&#xD;&#xD;
}&#xD;&#xD;
&#xD;&#xD;
//Input Box Value:&#xD;&#xD;
//	var thevalue = "100";&#xD;&#xD;
//	const ipb = document.getElementsByClassName("ipbox");&#xD;&#xD;
//	for (i=0; i&lt;ipb.length; i++) {&#xD;&#xD;
//	 	//ipb[i].style.backgroundColor = thevalue;&#xD;&#xD;
//	 	ipb[i].value = thevalue;&#xD;&#xD;
//	}&#xD;&#xD;
&#xD;&#xD;
//JQuery Method:&#xD;&#xD;
//	document.querySelectorAll('.ipbox').forEach( (x) =&gt; { x.value = '100' } )&#xD;&#xD;
&lt;/script&gt;&#xD;&#xD;
^</Template><Template Name="if" Description="">if ([+evaluation+]) {&#xD;&#xD;
 	[+Do some work+]; &#xD;&#xD;
}&#xD;&#xD;
^</Template><Template Name="isEven" Description="">  function isEven(n) {&#xD;&#xD;
      return n % 2 == 0;&#xD;&#xD;
  }&#xD;&#xD;
^ </Template><Template Name="isOdd" Description="">  function isOdd(n) {&#xD;&#xD;
      return Math.abs(n % 2) == 1;&#xD;&#xD;
  }&#xD;&#xD;
^</Template><Template Name="switch_case" Description="">switch([+expression+]) {&#xD;&#xD;
  case [+x+]:&#xD;&#xD;
    // code to be executed;&#xD;&#xD;
    break;&#xD;&#xD;
  case [+y+]:&#xD;&#xD;
    // code to be executed;&#xD;&#xD;
    break;&#xD;&#xD;
  default:&#xD;&#xD;
    // code to be executed;&#xD;&#xD;
}&#xD;&#xD;
^</Template><Template Name="try" Description="">try {&#xD;&#xD;
  Some code;&#xD;&#xD;
}&#xD;&#xD;
catch(err) {&#xD;&#xD;
  document.getElementById("demo").innerHTML = err.message;&#xD;&#xD;
}&#xD;&#xD;
^</Template><Template Name="while" Description="">while ([+evaluation+]) {&#xD;&#xD;
 	[+Code to be executed+];&#xD;&#xD;
 }&#xD;&#xD;
^</Template></Templates>
