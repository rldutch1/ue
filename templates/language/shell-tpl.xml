<?xml version="1.0"?>
<Templates encode="utf8escenc"><Template Name="Profile_AIX" Description="AIX Profile Template" Comments="0" Strings="0">PATH=/usr/bin:/etc:/usr/sbin:/usr/ucb:$HOME/bin:/usr/bin/X11:/sbin:$HOME:.&#xD;
&#xD;
export PATH&#xD;
&#xD;
if [ -s "$MAIL" ]           # This is at Shell startup.  In normal&#xD;
then echo "$MAILMSG"        # operation, the Shell checks&#xD;
fi                          # periodically.&#xD;
&#xD;
set -o vi&#xD;
#set ic&#xD;
#set number&#xD;
alias ls='ls -alF'&#xD;
alias md='mkdir -p'&#xD;
alias cls='clear'&#xD;
#alias dir='ls -alF |more'&#xD;
alias ping='ping -c4'&#xD;
alias listdir='ls -al |grep -i drwx |more'&#xD;
alias scp='/usr/bin/scp'&#xD;
alias du='du -m'&#xD;
alias unrar='unrar-3.4.3-aix'&#xD;
alias compress='compress -v'&#xD;
alias cclora='/cerner/w_standard/prod_wh/aixrs6000/cclora'&#xD;
&#xD;
#trap 'cleanup_done' 2&#xD;
&#xD;
backup() {&#xD;
#PATH=/bin:/usr/bin&#xD;
clear&#xD;
echo "Please type the name of the tar file you wish to create then the directories to backup separated by a space. Example: mytarfile.tar /home /tmp /etc"&#xD;
read tarball backupdirs&#xD;
&#xD;
# backupdirs="/etc /root"&#xD;
BK=Backup-`hostname`-$(date +%F_%H%M%S)_&#xD;
echo "Creating backup of " $backupdirs&#xD;
&#xD;
for path in $backupdirs&#xD;
do&#xD;
    echo "Adding backup of $path"&#xD;
#    echo "System backup on $path" | wall&#xD;
     tar -cvf ~/Backups/$BK$tarball $path 1&gt;/dev/null&#xD;
    sleep 2&#xD;
done&#xD;
#clear&#xD;
#echo "System backup complete, status: $?"&#xD;
#echo "System backup complete, status: $?" | mail -s "Backup Script Finished!" root&#xD;
echo&#xD;
echo&#xD;
echo "Successfully completed backup of" $backupdirs". The backup file has been named" $BK$tarball". Please move" $BK$tarball" to a safe location."&#xD;
echo&#xD;
echo&#xD;
while true; do&#xD;
  echo -n "Would you like to list the contents of $BK$tarball to $BK$tarball.list? This may take a while if your backup file is large! (y/n) "&#xD;
  read yn&#xD;
  case $yn in&#xD;
    y* | Y* ) tar -tf ~/Backups/$BK$tarball &gt;&gt; $BK$tarball.list.txt ; break ;;&#xD;
    [nN]* )   echo "Goodbye" ; break ;;&#xD;
    q* ) exit ;;&#xD;
    * ) echo "unknown response.  Asking again" ;;&#xD;
  esac&#xD;
done&#xD;
#DY=rundatetime-is-$(date +%F_%H%M%S).txt&#xD;
#ls -alFh ./ &gt; $DY&#xD;
}&#xD;
&#xD;
mpagebackup() {&#xD;
clear&#xD;
RH=`hostname`-`date +%F_%H%M%S`&#xD;
tar -cvf ~/Backups/MPage_Backup-$RH.tar /cerner/w_custom/cust_wh/code/script/1bh_mpage* /cerner/w_custom/cust_wh/code/script/1samt_az* /cerner/w_custom/cust_wh/code/html/*.html&#xD;
#RLH=tar -tvf MPage_Backup-$RH.tar&#xD;
cd ~/Backups/; uuencode MPage_Backup-$RH.tar MPage_Backup-$RH.tar | mailx -s "MPage_Backup-$RH.tar" robert.holland@bannerhealth.com; cd -&#xD;
}&#xD;
&#xD;
ccluserdir() {&#xD;
cd /cerner/d_prod/ccluserdir&#xD;
}&#xD;
&#xD;
cerlogprod() {&#xD;
cd /cerner/d_prod/log/&#xD;
}&#xD;
&#xD;
cerprint() {&#xD;
cd /cerner/d_prod/print&#xD;
}&#xD;
&#xD;
certempprod() {&#xD;
cd /cerner/d_prod/temp/&#xD;
}&#xD;
&#xD;
logfiles() {&#xD;
cd /cerner/d_prod/log/&#xD;
}&#xD;
&#xD;
cer_install() {&#xD;
cd /cerner/w_standard/prod_wh/install&#xD;
}&#xD;
&#xD;
cer_script() {&#xD;
cd /cerner/w_standard/prod_wh/code/script&#xD;
}&#xD;
&#xD;
cleanup_done() {&#xD;
trap '' 2&#xD;
exit&#xD;
}&#xD;
&#xD;
commands() {&#xD;
case $1 in&#xD;
*)&#xD;
        echo "  backup - Run backup script."&#xD;
        echo "  bedcheck - Check ccluserdir on all nodes for Bedrock exported .csv file."&#xD;
        echo "  ccluserdir - Change directory to cerner/d_prod/ccluserdir."&#xD;
        echo "  cerlogprod - Change directory to cerner/d_prod/log."&#xD;
        echo "  cer_install - Change directory to cerner/w_standard/prod_wh/install."&#xD;
        echo "  cerprint - Change directory to cerner/d_prod/print. Downtime MAR file location."&#xD;
        echo "  certempprod - Change directory to cerner/d_prod/temp. Safety Surveillor file location."&#xD;
        echo "  cleanup_done - Cleanup after running CCL."&#xD;
        echo "  commands - Shows a list of custom commands."&#xD;
        echo "  compress - Compress files. Adds .Z extention."&#xD;
        echo "  cust_html - Change directory to cust_html directory."&#xD;
        echo "  cust_script - Change directory to cust_script directory."&#xD;
        echo "  cust_script_dev - Change directory to cust_script_dev directory (pcma1p only)."&#xD;
        echo "  cust_proc - Change directory to cust_proc directory."&#xD;
        echo "  gohome - Change directory to your home directory."&#xD;
        echo "  groups - Display groups and members."&#xD;
        echo "  logfiles - Change directory to /cerner/d_prod/log/ directory."&#xD;
        echo "  reload - Reload your .profile."&#xD;
        echo "  rgrep - Search for text in files."&#xD;
        echo "  safetysend - Upload the Safety Surveillor files to 10.65.48.199."&#xD;
        echo "  searchnodes - Search all nodes for specified file."&#xD;
        echo "  showfiles - Display a list of the files in the current directory."&#xD;
        echo "  systeminfo - Display system information for the server."&#xD;
        echo "  Tar - Create a tar archive with current date in filename."&#xD;
        echo "  userinfo - Display system user information for a specific user on the server."&#xD;
        echo "  UUE - Create a uuencoded file and send to a recipient."&#xD;
        echo "  UUECCL - Create a uuencoded file and send to a recipient."&#xD;
        ;;&#xD;
esac&#xD;
}&#xD;
&#xD;
cust_script() {&#xD;
cd /cerner/w_custom/cust_wh/code/script/&#xD;
}&#xD;
&#xD;
cust_html() {&#xD;
cd /cerner/w_custom/cust_wh/code/html/&#xD;
}&#xD;
&#xD;
cust_script_dev() {&#xD;
#Node 1 only&#xD;
cd /cerner/w_custom/cust_wh/code/scriptdev/&#xD;
}&#xD;
&#xD;
cust_proc() {&#xD;
#Node 6 only&#xD;
cd /cerner/w_custom/cust_wh/proc/&#xD;
}&#xD;
&#xD;
learning_live() {&#xD;
cd /cerner/w_custom/cust_wh/code/script/&#xD;
ls mp_learning_live*&#xD;
echo "Check /cerner/w_standard/prod_wh/install/ directory for mp_learning_*"&#xD;
echo "learning_live_install"&#xD;
}&#xD;
&#xD;
learning_live_install() {&#xD;
cd /cerner/w_custom/prod_wh/install/&#xD;
ls mp_learning_live*&#xD;
echo "Check /cerner/w_standard/prod_wh/install/ directory for mp_learning_*"&#xD;
echo "learning_live_install"&#xD;
}&#xD;
&#xD;
gohome() {&#xD;
cd ~&#xD;
}&#xD;
&#xD;
reload() {&#xD;
cd ~; . .profile; cd -&#xD;
}&#xD;
&#xD;
#ccl&#xD;
#cleanup_done&#xD;
&#xD;
cust_script() {&#xD;
cd /cerner/w_custom/cust_wh/code/script/&#xD;
}&#xD;
&#xD;
listlogs() {&#xD;
        echo "Listing todays Safety Surveillor Logs"&#xD;
        ls /cerner/d_prod/log/bh_sn_surv_ftp_$(date +%Y%m%d)*.log |awk '{print $9}'&#xD;
        ls /cerner/d_prod/log/bh_sn_surv_ftp_$(date +%Y%m%d)*.log |wc|awk '{print "There are " $1 " log files out of 63 log files for today."}'&#xD;
}&#xD;
&#xD;
safetysend() {&#xD;
if [ $# -ne 2 ]&#xD;
then&#xD;
    echo&#xD;
    echo "--------------Error 19-1----------------"&#xD;
    echo "| Example: safetysend ban11 09122010 |"&#xD;
    echo "--------------------------------------"&#xD;
    echo&#xD;
else&#xD;
case $1 in&#xD;
ban11)&#xD;
        certempprod&#xD;
        HOST=10.65.48.199&#xD;
        USER=ban11&#xD;
        PASSWD=WdqV9Aqw&#xD;
        exec 4&gt;&amp;1&#xD;
        ftp -nv &gt;&amp;4 2&gt;&amp;4 |&amp;&#xD;
        print -p open $HOST&#xD;
        print -p user $USER $PASSWD&#xD;
        #print -p cd directory&#xD;
        #print -p binary&#xD;
        print -p prompt&#xD;
        print -p ascii&#xD;
        print -p mput ban11*$2*&#xD;
        print -p bye&#xD;
        wait&#xD;
        exit 0&#xD;
  ;;&#xD;
ban23)&#xD;
        HOST=10.65.48.199&#xD;
        USER=ban23&#xD;
        PASSWD=plnd3vSn&#xD;
        exec 4&gt;&amp;1&#xD;
        ftp -nv &gt;&amp;4 2&gt;&amp;4 |&amp;&#xD;
        print -p open $HOST&#xD;
        print -p user $USER $PASSWD&#xD;
        #print -p cd directory&#xD;
        #print -p binary&#xD;
        print -p prompt&#xD;
        print -p ascii&#xD;
        print -p mput ban23*$2*&#xD;
        print -p bye&#xD;
        wait&#xD;
        exit 0&#xD;
  ;;&#xD;
@xyzpdq | ban02 | ban03 | ban04 | ban05 | ban06 | ban07 | ban08 | ban09 | ban10 | ban12 | ban13 | ban14 | ban15 | ban16 | ban17 | ban18 | ban19 | ban20 | ban20 | ban21 | ban22)&#xD;
        HOST=10.65.48.199&#xD;
        USER=$1&#xD;
        PASSWD=Pr3m1er&#xD;
        exec 4&gt;&amp;1&#xD;
        ftp -nv &gt;&amp;4 2&gt;&amp;4 |&amp;&#xD;
        print -p open $HOST&#xD;
        print -p user $USER $PASSWD&#xD;
        #print -p cd directory&#xD;
        ##print -p binary&#xD;
        print -p prompt&#xD;
        print -p ascii&#xD;
        print -p mput $1*$2*&#xD;
        print -p bye&#xD;
        wait&#xD;
        exit 0&#xD;
  ;;&#xD;
*)&#xD;
  Message="Usage: safetysend username date."&#xD;
  Message1="Example: safetysend ban11 09122010"&#xD;
  echo " "&#xD;
  echo " "&#xD;
  echo $Message " "$Message1&#xD;
  echo " "&#xD;
  echo " "&#xD;
  ;;&#xD;
esac&#xD;
fi&#xD;
}&#xD;
&#xD;
showfiles() {&#xD;
        ls -al |awk '{print $9}' | more&#xD;
}&#xD;
&#xD;
systeminfo () {&#xD;
lsattr -El sys0&#xD;
}&#xD;
&#xD;
Tar () {&#xD;
#if [ $# -eq 0 ]&#xD;
#then&#xD;
#echo Usage: Tar filename.tar filestobearchived&#xD;
#else&#xD;
echo "Type the tarname without the (.tar) extension followed by a space and/or the file(s) or folders to be archived. Separate each file(s) by a space."&#xD;
echo "Example: MyTarFilenameWithNoSpaces /foldername1/filename.xxx filename.yyy /foldername2/filename.zzz /foldername3/*"&#xD;
echo "If you make a mistake on Fedora Linux, hold the Shift + Backspace Key to delete what you have typed. In AIX Korn shell just press the backspace key."&#xD;
read tarname filenames&#xD;
BK="Backup.Of."&#xD;
#tar -cvf $BK$tarname.`date |awk '{print $3"."$2"."$6"."$4}' | sed 's/:/_/g'`.tar $filenames&#xD;
tar -cvf $BK$tarname.`date +"%Y%m%d%H%M%S%Z"`.tar $filenames&#xD;
#fi&#xD;
}&#xD;
&#xD;
userinfo() {&#xD;
if [ $# -eq 0 ]&#xD;
then&#xD;
echo Usage: userinfo username&#xD;
else&#xD;
lsuser -f $1&#xD;
fi&#xD;
}&#xD;
&#xD;
#uue a file then email it.&#xD;
UUE() {&#xD;
if [ $# -eq 0 ]&#xD;
then&#xD;
echo Usage: UUE filename.xxx person@example.com&#xD;
else&#xD;
uuencode $1 $1 | mailx -s "$1" $2&#xD;
fi&#xD;
}&#xD;
&#xD;
#uue a ccl or prg then email it.&#xD;
UUECCL() {&#xD;
if [ $# -eq 0 ]&#xD;
then&#xD;
echo Usage: UUECCL cclfilename.xxx person@example.com&#xD;
else&#xD;
cat $1 &gt; $1.txt; uuencode $1.txt $1.txt | mailx -s "Rename $1.txt to .prg" $2; rm -f $1.txt&#xD;
fi&#xD;
}&#xD;
&#xD;
Tar () {&#xD;
#if [ $# -eq 0 ]&#xD;
#then&#xD;
#echo Usage: Tar filename.tar filestobearchived&#xD;
#else&#xD;
echo "Type the tarname without the (.tar) extension followed by a space and/or the file(s) or folders to be archived. Separate each file(s) by a space."&#xD;
echo "Example: MyTarFilenameWithNoSpaces /foldername1/filename.xxx filename.yyy /foldername2/filename.zzz /foldername3/*"&#xD;
echo "If you make a mistake on Fedora Linux, hold the Shift + Backspace Key to delete what you have typed. In AIX Korn shell just press the backspace key."&#xD;
read tarname filenames&#xD;
BK="Backup.Of."&#xD;
tar -cvf $BK$tarname.`date +"%Y%m%d_%H%M%S%Z"`.tar $filenames&#xD;
#fi&#xD;
}&#xD;
&#xD;
timestamp(){&#xD;
if [ $# -eq 0 ]&#xD;
then&#xD;
TIMESTAMP=`date +"%Y%m%d%H%M%S%Z"`&#xD;
echo "Current timestame is: $TIMESTAMP"&#xD;
echo Usage: timestamp filename&#xD;
else&#xD;
stamp=`hostname`.`date +"%Y%m%d%H%M%S%Z"`.bak&#xD;
cp $1 $1.$stamp&#xD;
fi&#xD;
}&#xD;
&#xD;
bashbak() {&#xD;
cd ~&#xD;
TimeStamp=`hostname`.`date +"%Y%m%d%H%M%S%Z"`&#xD;
tar -cvf Backup.Of.Profile.AIX.$TimeStamp.tar .profile unrar-3.4.3-aix ~/srv0079/getlogs ~/srv0079/getlogs.ksh ~/srv0079/send2team ~/.ssh ~/.exrc&#xD;
scp Backup.Of.Profile.AIX.$TimeStamp.tar rldutch1@www.robholland.com:~/html/blog/personal/Bashrc/AIX/&#xD;
scp Backup.Of.Profile.AIX.$TimeStamp.tar rldutch1rh@www.robholland.co:~/public_html/robholland.com/blog/personal/Bashrc/AIX/&#xD;
cd -&#xD;
}&#xD;
&#xD;
domains() {&#xD;
ddirdump&#xD;
}&#xD;
&#xD;
rgrep() {&#xD;
#if [ $# -ne 2 ]&#xD;
if [ $# -ne 1 ]&#xD;
then&#xD;
clear&#xD;
echo Case-sensitive search&#xD;
echo Usage example: rgrep searchterm .prg&#xD;
else&#xD;
#grep -i "$1" *$2 |cut -d : -f1&#xD;
grep -i "$1" *.prg |cut -d : -f1&#xD;
fi&#xD;
}&#xD;
&#xD;
dir() {&#xD;
for foo in $(ls);do&#xD;
   if [[ -d $foo ]];then&#xD;
      print "$foo is a directory"&#xD;
   elif [[ -f $foo ]];then&#xD;
      print "$foo is a file"&#xD;
#   else&#xD;
#      print "Good bye, `whoami`!"&#xD;
   fi&#xD;
done&#xD;
}&#xD;
&#xD;
searchnodes_older(){&#xD;
if [ $# -eq 0 ]&#xD;
then&#xD;
echo "searchnodes filename"&#xD;
else&#xD;
clear&#xD;
i=1&#xD;
while [[ $i -le 6 ]]&#xD;
do&#xD;
        echo "Searching Node $i: "&#xD;
  ssh rholland@pcma"$i"p.bdcm.bannerhealth.com "ls /cerner/w_custom/cust_wh/code/script/$1"&#xD;
  # echo "$i"&#xD;
   let i=i+1&#xD;
done&#xD;
fi&#xD;
}&#xD;
&#xD;
searchnodes_old(){&#xD;
if [ $# -ne 2 ]&#xD;
then&#xD;
clear&#xD;
echo "Usage: "&#xD;
echo "searchnodes prg filename.prg"&#xD;
echo "          or"&#xD;
echo "searchnodes html filename.html"&#xD;
else&#xD;
clear&#xD;
case $1 in&#xD;
prg)&#xD;
i=1&#xD;
while [[ $i -le 6 ]]&#xD;
do&#xD;
        echo "Searching Node $i: "&#xD;
  ssh rholland@pcma"$i"p.bdcm.bannerhealth.com "ls /cerner/w_custom/cust_wh/code/script/$2"&#xD;
  # echo "$i"&#xD;
   let i=i+1&#xD;
done&#xD;
;;&#xD;
html)&#xD;
i=1&#xD;
while [[ $i -le 6 ]]&#xD;
do&#xD;
        echo "Searching Node $i: "&#xD;
  ssh rholland@pcma"$i"p.bdcm.bannerhealth.com "ls /cerner/w_custom/cust_wh/code/html/$2"&#xD;
  # echo "$i"&#xD;
   let i=i+1&#xD;
done&#xD;
;;&#xD;
esac&#xD;
fi&#xD;
}&#xD;
&#xD;
searchnodes(){&#xD;
if [ $# -ne 2 ]&#xD;
then&#xD;
clear&#xD;
echo "Usage: "&#xD;
echo "searchnodes script filename.prg"&#xD;
echo "          or"&#xD;
echo "searchnodes html filename.html"&#xD;
else&#xD;
clear&#xD;
i=1&#xD;
while [[ $i -le 6 ]]&#xD;
do&#xD;
        echo "Searching Node $i: "&#xD;
  ssh rholland@pcma"$i"p.bdcm.bannerhealth.com "ls /cerner/w_custom/cust_wh/code/$1/$2"&#xD;
  # echo "$i"&#xD;
   let i=i+1&#xD;
done&#xD;
fi&#xD;
}&#xD;
&#xD;
searchccldir(){&#xD;
if [ $# -ne 1 ]&#xD;
then&#xD;
clear&#xD;
echo "Usage: "&#xD;
echo "searchccldir filename.prg"&#xD;
else&#xD;
clear&#xD;
i=1&#xD;
while [[ $i -le 6 ]]&#xD;
do&#xD;
        echo "Searching Node $i: "&#xD;
  ssh rholland@pcma"$i"p.bdcm.bannerhealth.com "ls /cerner/d_prod/ccluserdir/$1"&#xD;
  # echo "$i"&#xD;
   let i=i+1&#xD;
done&#xD;
fi&#xD;
}&#xD;
&#xD;
#sed 's/I\ am/changing\ to/g' filenames &gt; filenames.new&#xD;
#sed 's/FindThis/ChangeToThis\ to/g' filenames &gt; filenames.new&#xD;
&#xD;
groups(){&#xD;
lsgroup -c ALL | sed '/^^#.*/d' | tr ':' '\011'&#xD;
}&#xD;
&#xD;
bedcheck(){&#xD;
if [ $# -eq 0 ]&#xD;
then&#xD;
echo "Usage: bedcheck br_datamart_mp*"&#xD;
else&#xD;
echo "Checking PCMA1P"&#xD;
ls -al /cerner/d_prod/ccluserdir/$1&#xD;
echo "Checking PCMA2P"&#xD;
ssh rholland@pcma2p.bdcm.bannerhealth.com "ls -al /cerner/d_prod/ccluserdir/$1"&#xD;
echo "Checking PCMA3P"&#xD;
ssh rholland@pcma3p.bdcm.bannerhealth.com "ls -al /cerner/d_prod/ccluserdir/$1"&#xD;
echo "Checking PCMA4P"&#xD;
ssh rholland@pcma4p.bdcm.bannerhealth.com "ls -al /cerner/d_prod/ccluserdir/$1"&#xD;
echo "Checking PCMA5P"&#xD;
ssh rholland@pcma5p.bdcm.bannerhealth.com "ls -al /cerner/d_prod/ccluserdir/$1"&#xD;
echo "Checking PCMA6P"&#xD;
ssh rholland@pcma6p.bdcm.bannerhealth.com "ls -al /cerner/d_prod/ccluserdir/$1"&#xD;
fi&#xD;
}&#xD;
</Template></Templates>
